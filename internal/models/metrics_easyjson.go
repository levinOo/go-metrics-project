// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels(in *jlexer.Lexer, out *Metrics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ID = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				out.MType = string(in.String())
			}
		case "delta":
			if in.IsNull() {
				in.Skip()
				out.Delta = nil
			} else {
				if out.Delta == nil {
					out.Delta = new(int64)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Delta = int64(in.Int64())
				}
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(float64)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Value = float64(in.Float64())
				}
			}
		case "hash":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Hash = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels(out *jwriter.Writer, in Metrics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MType))
	}
	if in.Delta != nil {
		const prefix string = ",\"delta\":"
		out.RawString(prefix)
		out.Int64(int64(*in.Delta))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(*in.Value))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metrics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metrics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metrics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metrics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels(l, v)
}
func easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels1(in *jlexer.Lexer, out *ListMetrics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "List":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]Metrics, 0, 1)
					} else {
						out.List = []Metrics{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Metrics
					if in.IsNull() {
						in.Skip()
					} else {
						(v1).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels1(out *jwriter.Writer, in ListMetrics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"List\":"
		out.RawString(prefix[1:])
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListMetrics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListMetrics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListMetrics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListMetrics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels1(l, v)
}
func easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels2(in *jlexer.Lexer, out *DataList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]Data, 0, 1)
					} else {
						out.Events = []Data{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Data
					if in.IsNull() {
						in.Skip()
					} else {
						(v4).UnmarshalEasyJSON(in)
					}
					out.Events = append(out.Events, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels2(out *jwriter.Writer, in DataList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix[1:])
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Events {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels2(l, v)
}
func easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels3(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "ts":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TS = int64(in.Int64())
			}
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.MetricNames = nil
			} else {
				in.Delim('[')
				if out.MetricNames == nil {
					if !in.IsDelim(']') {
						out.MetricNames = make([]string, 0, 4)
					} else {
						out.MetricNames = []string{}
					}
				} else {
					out.MetricNames = (out.MetricNames)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					if in.IsNull() {
						in.Skip()
					} else {
						v7 = string(in.String())
					}
					out.MetricNames = append(out.MetricNames, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ip_address":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IP = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels3(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TS))
	}
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix)
		if in.MetricNames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.MetricNames {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ip_address\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeGithubComLevinOoGoMetricsProjectInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeGithubComLevinOoGoMetricsProjectInternalModels3(l, v)
}
